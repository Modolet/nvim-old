local M = {}

M.append_semicolon = function()
	local cur_line_num = vim.fn.line(".")
	local cur_line = vim.fn.getline(cur_line_num)
	local need_semicolon = true
	if type(cur_line) ~= "string" then
		return
	end
	local i = string.len(cur_line)
	while i ~= 0 do
		local s = string.sub(cur_line, i, i)
		if s ~= " " and s ~= "\t" then
			if s == ";" then
				need_semicolon = false
				break
			else
				break
			end
		end
		i = i - 1
	end
	if i == 0 then
		need_semicolon = false
	end
	if true == need_semicolon then
		vim.fn.setline(cur_line_num, cur_line .. ";")
	end
end

M.func = function()
	local clang_format_path = vim.fn.stdpath("config") .. "static/clang-format"
	print(clang_format_path)
end

M.gd = function()
	require("telescope.builtin").lsp_definitions({
		initial_mode = "normal",
		-- ignore_filename = false,
	})
end

M.welcome = function()
	-- Ëé∑ÂèñÁî®Êà∑Âêç
	local user = vim.fn.expand("$USER")
	local hour = os.date("%H")
	if tonumber(hour) < 6 then
		vim.notify([[ üòäÂáåÊô®‰∫ÜÔºåË¶ÅÊ≥®ÊÑè‰ºëÊÅØÂêñ, ]] .. user .. [[! üòä]])
	elseif tonumber(hour) < 9 then
		vim.notify([[ ü•∞Êó©‰∏äÂ•Ω, ]] .. user .. [[! ‰ªäÂ§©‰πüË¶ÅÂÖÉÊ∞îÊª°Êª°Âëê~ ü•∞]])
	elseif tonumber(hour) < 12 then
		vim.notify([[üç≤‰∏äÂçàÂ•Ω, ]] .. user .. [[! Ë¶ÅËÆ∞ÂæóÂêÉÊó©È•≠Âêñ~ üç≤]])
	elseif tonumber(hour) < 14 then
		vim.notify([[üèÄ‰∏≠ÂçàÂ•Ω, ]] .. user .. [[! Â§öÂá∫ÂéªËµ∞Ëµ∞Âêñ~üèÄ]])
	elseif tonumber(hour) < 17 then
		vim.notify([[‚òï‰∏ãÂçàÂ•Ω, ]] .. user .. [[! ËÆ∞ÂæóÂ§öÂñùÊ∞¥Âêñ~‚òï]])
	elseif tonumber(hour) < 19 then
		vim.notify([[üë™ÂÇçÊôöÂ•Ω, ]] .. user .. [[! ËÆ∞ÂæóÂ§öÈô™Èô™‰∫≤Áà±ÁöÑ‰∫∫Âëê~üë™]])
	elseif tonumber(hour) < 22 then
		vim.notify([[üåôÊôö‰∏äÂ•Ω, ]] .. user .. [[! Á¥Ø‰∫ÜÂèØ‰ª•Ê¥ó‰∏™ÁÉ≠Ê∞¥Êæ°Âì¶~üåô]])
	else
		vim.notify("üõåÂ§úÊ∑±‰∫Ü,Âø´Áù°ËßâÂêß~ " .. user .. "! üõå")
	end
end
return M
